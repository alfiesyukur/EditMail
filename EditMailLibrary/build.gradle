apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'signing'


version = "2.0.0"
group = "eu.rekisoft.android"

def mavenVersion = "2.0.0"
def mavenArtifactId = "editmail"
def mavenGroupId = "eu.rekisoft.android"
def mavenDescription = "A smart control for entering email addresses with automatically checking if the domain exists and if the domain can receive emails"
def githubNickname= "rekire"
def githubProject = "EditMail"
def author="RenÃ© Kilczan"
def licenseName="Rekisoft Public License (RKSPL)"
def licenseUrl="http://www.rekisoft.eu/licenses/rkspl.html"
def licenseComment="This code is licensed under the Rekisoft Public License."
def theInceptionYear=2013

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 4
        versionName version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['dnsjava-2.1.6.jar'])
    compile 'eu.rekisoft.android:lazyworker:1.0.0'
    compile 'eu.rekisoft.android:uiworker:1.0.1'
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibrary"
}

if(JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

//apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'

// copy of https://github.com/keyboardsurfer/Crouton/blob/master/library/build.gradle
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description 'Generates Javadoc for $variant.name.'
        source = variant.javaCompile.source
        ext.androidJar = '${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar'
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }
    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description 'Bundles Javadoc into zip for $variant.name'
        classifier = 'javadoc'
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
task jar(type: Jar) {
    from 'build/intermediates/classes/release'
    //exclude '**/BuildConfig.class'
    //exclude '**/R.class'
}
task javadocJar(type: Jar, dependsOn: "javadocRelease") {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    //archives jar
}

task wrapper(type: Wrapper) {
    description "Generates the gradle wrapper"
    gradleVersion = "2.10"
}

signing {
    sign configurations.archives
}

/*uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: repository) {
            if(project.hasProperty('sonatypeUser') && project.hasProperty('sonatypePass')) {
                authentication(userName: sonatypeUser, password: sonatypePass)
            } else {
                logger.warn('Found not sonatype credentials. Publishing is not possible.')
            }
        }
*/
install {
    repositories.mavenInstaller {
        pom.project {
            inceptionYear theInceptionYear
            name githubProject
            groupId mavenGroupId
            version mavenVersion
            artifactId mavenArtifactId
            packaging 'aar'
            description mavenDescription
            url 'https://github.com/'+githubNickname+'/'+githubProject

            scm {
                url 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
                connection 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
                tag mavenVersion
                developerConnection 'scm:git@github.com:'+githubNickname+'/'+githubProject+'.git'
            }

            issueManagement {
                url 'https://github.com/'+githubNickname+'/'+githubProject+'/issues'
                system 'GitHub Issues'
            }

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                    //comment licenseComment
                    //distribution 'repo'
                }
            }

            developers {
                developer {
                    id githubNickname
                    name author
                }
            }
        }//.writeTo("$buildDir/libs/pom.xml")
    }
}